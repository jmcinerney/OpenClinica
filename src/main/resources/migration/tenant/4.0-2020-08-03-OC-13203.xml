<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">


    <changeSet author="jkeremian" id="2020-08-03-OC-13203-01">
        <comment>Deleting the status and old_status  columns from event_crf table</comment>
        <dropColumn tableName="event_crf">
            <column name="status_id" type="INT"/>
            <column name="old_status_id" type="INT"/>
        </dropColumn>
    </changeSet>

    <changeSet author="jkeremian" id="2020-08-03-OC-13203-02">
        <comment>Deleting the status and subject_event_status  columns from study_event table</comment>
        <dropColumn tableName="study_event">
            <column name="status_id" type="INT"/>
            <column name="subject_event_status_id" type="INT"/>
        </dropColumn>
    </changeSet>

    <changeSet author="jkeremian" id="2017-08-03-OC-13203-03" runOnChange="true">

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION item_data_trigger() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            entity_name_value TEXT;
            ec_workflow_status TEXT;
            std_evnt_id INTEGER;
            form_layout_id INTEGER;
            BEGIN
            SELECT INTO ec_workflow_status workflow_status FROM event_crf WHERE event_crf_id = OLD.event_crf_id;
            SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
            SELECT INTO form_layout_id ec.form_layout_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;

            IF (TG_OP = ''DELETE'') THEN
            /*---------------*/
            /*Item data deleted (by deleting an event crf)*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = OLD.item_id;
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id, study_event_id, event_crf_version_id,instance_id)
            VALUES (pk, ''13'', now(), OLD.update_id, ''item_data'', OLD.item_data_id, entity_name_value, OLD.value, OLD.event_crf_id, std_evnt_id, form_layout_id,OLD.instance_id);
            RETURN NULL; --return values ignored for ''after'' triggers
            ELSIF (TG_OP = ''UPDATE'') THEN

            IF(OLD.value <![CDATA[<>]]> NEW.value and ec_workflow_status = ''NOT_STARTED'') THEN

            /*---------------*/
            /*Item data updated*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id,item_data_repeat_key,instance_id)
            VALUES (pk, ''13'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id ,std_evnt_id, form_layout_id , NEW.ordinal,NEW.instance_id);
            DELETE FROM rule_action_run_log where item_data_id = NEW.item_data_id;
            /*---------------*/
            ELSEIF(OLD.value <![CDATA[<>]]> NEW.value) THEN
            /*---------------*/
            /*Item data updated*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id,study_event_id, event_crf_version_id,item_data_repeat_key,instance_id)
            VALUES (pk, ''1'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id,std_evnt_id, form_layout_id , NEW.ordinal, NEW.instance_id);
            DELETE FROM rule_action_run_log where item_data_id = NEW.item_data_id;
            /*---------------*/
            END IF;
            RETURN NULL;  /*return values ignored for ''after'' triggers*/
            END IF;
            RETURN NULL;  /*return values ignored for ''after'' triggers*/
            END;
            '
            LANGUAGE plpgsql;
        </sql>
    </changeSet>


</databaseChangeLog>
