<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">


    <changeSet author="jkeremian" id="2020-07-15-12650-001" runOnChange="true">
        <preConditions onFail="MARK_RAN">
            <dbms type="postgresql" />
            <!--fixing restore study event trigger -->
        </preConditions>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION study_event_trigger_new() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            BEGIN
            IF (TG_OP = ''INSERT'') THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''63'', now(), NEW.owner_id, ''study_event'', NEW.study_event_id, ''Status'','''', NEW.workflow_status);
            END IF;

            IF (TG_OP = ''UPDATE'') THEN
            IF(OLD.workflow_status <![CDATA[<>]]> NEW.workflow_status) THEN

            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''63'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.workflow_status, NEW.workflow_status);

            END IF;


            IF((OLD.removed is NULL and NEW.removed is not Null)
            or(OLD.removed is not NULL and NEW.removed is Null)
            or (OLD.removed <![CDATA[<>]]> NEW.removed)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''64'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Removed'', OLD.removed, NEW.removed);
            END IF;

            IF((OLD.archived is NULL and NEW.archived is not Null)
            or(OLD.archived is not NULL and NEW.archived is Null)
            or (OLD.archived <![CDATA[<>]]> NEW.archived)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''59'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Archived'', OLD.archived, NEW.archived);
            END IF;

            IF((OLD.locked is NULL and NEW.locked is not Null)
            or(OLD.locked is not NULL and NEW.locked is Null)
            or (OLD.locked <![CDATA[<>]]> NEW.locked)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''60'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Locked'', OLD.locked, NEW.locked);
            END IF;

            IF((OLD.signed is NULL and NEW.signed is not Null)
            or(OLD.signed is not NULL and NEW.signed is Null)
            or (OLD.signed <![CDATA[<>]]> NEW.signed)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value,details)
            VALUES (pk, ''65'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Signed'', OLD.signed, NEW.signed, NEW.attestation);
            END IF;

            IF(OLD.date_start <![CDATA[<>]]> NEW.date_start) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''24'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Start date'', OLD.date_start, NEW.date_start);
            END IF;
            IF(OLD.date_end <![CDATA[<>]]> NEW.date_end) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''25'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''End date'', OLD.date_end, NEW.date_end);
            END IF;
            IF(OLD.location <![CDATA[<>]]> NEW.location) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
            VALUES (pk, ''26'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Location'', OLD.location, NEW.location);
            END IF;
            RETURN NULL;  /*return values ignored for ''after'' triggers*/
            END IF;
            RETURN NULL;
            END;'
            LANGUAGE plpgsql;

        </sql>
    </changeSet>

    <changeSet author="jkeremian" id="2020-07-15-OC-12650-002">
        <preConditions onFail="MARK_RAN"><dbms type="postgresql" /></preConditions>
        <comment>create event_crf_initial_trigger()</comment>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION event_crf_initial_trigger() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            entity_name_value TEXT;

            BEGIN
            IF (TG_OP = ''INSERT'') THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value ''Status'';
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id )
            VALUES (pk, ''66'', now(), NEW.owner_id, ''event_crf'', NEW.event_crf_id, entity_name_value,'''', NEW.workflow_status, NEW.event_crf_id );
            RETURN NULL;
            END IF;
            RETURN NULL;
            END;
            '
            LANGUAGE plpgsql;
        </sql>

    </changeSet>

    <changeSet author="jkeremian" id="2020-07-15-12650-003" runOnChange="true">
        <preConditions onFail="MARK_RAN">
            <dbms type="postgresql" />
            <!--<runningAs username="clinica" />-->
        </preConditions>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION event_crf_trigger() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            entity_name_value TEXT;
            BEGIN

            IF (TG_OP = ''UPDATE'') THEN
            IF(OLD.workflow_status <![CDATA[<>]]> NEW.workflow_status) THEN
            /*Event CRF status changed*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value ''Status'';

            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id,study_event_id, event_crf_version_id )
            VALUES (pk, ''66'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.workflow_status, NEW.workflow_status, NEW.event_crf_id, NEW.study_event_id ,NEW.form_layout_id);

            END IF;

            IF((OLD.removed is NULL and NEW.removed is not Null)
            or(OLD.removed is not NULL and NEW.removed is Null)
            or (OLD.removed <![CDATA[<>]]> NEW.removed)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id)
            VALUES (pk, ''61'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, ''Removed'', OLD.removed, NEW.removed, NEW.event_crf_id , NEW.study_event_id ,NEW.form_layout_id);
            END IF;

            IF((OLD.archived is NULL and NEW.archived is not Null)
            or(OLD.archived is not NULL and NEW.archived is Null)
            or (OLD.archived <![CDATA[<>]]> NEW.archived)) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id)
            VALUES (pk, ''62'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, ''Archived'', OLD.archived, NEW.archived, NEW.event_crf_id , NEW.study_event_id ,NEW.form_layout_id);
            END IF;


            IF(OLD.date_interviewed <![CDATA[<>]]> NEW.date_interviewed) THEN
            /*---------------*/
            /*Event CRF date interviewed*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value ''Date interviewed'';
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id)
            VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.date_interviewed, NEW.date_interviewed, NEW.event_crf_id , NEW.study_event_id ,NEW.form_layout_id);
            /*---------------*/
            END IF;

            IF((OLD.interviewer_name <![CDATA[<>]]> NEW.interviewer_name) AND (OLD.interviewer_name <![CDATA[<>]]> '''')) THEN
            /*---------------*/
            /*Event CRF interviewer name*/
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value ''Interviewer Name'';
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id)
            VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.interviewer_name, NEW.interviewer_name, NEW.event_crf_id , NEW.study_event_id ,NEW.form_layout_id);
            /*---------------*/
            END IF;

            IF(OLD.sdv_status <![CDATA[<>]]> NEW.sdv_status) THEN
            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
            SELECT INTO entity_name_value ''EventCRF SDV Status'';
            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,study_event_id, event_crf_version_id)
            VALUES (pk, ''32'', now(), NEW.sdv_update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.sdv_status, NEW.sdv_status, NEW.event_crf_id , NEW.study_event_id ,NEW.form_layout_id);
            /*---------------*/
            END IF;
            RETURN NULL;  /*return values ignored for ''after'' triggers*/
            END IF;
            END;
            '
            LANGUAGE plpgsql;

        </sql>
    </changeSet>

</databaseChangeLog>
